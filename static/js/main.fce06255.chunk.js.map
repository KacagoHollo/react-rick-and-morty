{"version":3,"sources":["api/useFetch.js","api/dataRoutes.js","components/Character.jsx","components/Characters.jsx","api/useData.js","components/Location.jsx","components/Locations.jsx","components/Button.jsx","components/Description.jsx","App.js","serviceWorker.js","index.js","images/Rick_and_Morty_Logo_and_Image.png"],"names":["useFetch","initUrl","useState","url","setUrl","undefined","data","setData","useEffect","fetch","then","response","status","json","mainUrls","Character","props","isShown","setIsShown","className","onClick","name","src","image","alt","species","gender","location","Characters","page","setPage","character","pageNum","characters","useCharacters","characterList","results","map","item","key","id","origin","Pagination","count","onChange","event","value","defaultPage","boundaryCount","size","color","Location","type","dimension","Locations","locations","useLocations","locationList","created","ButtonList","button1","charText","button2","locText","showChar","showLoc","Description","App","setCharacter","setLocation","setDescription","logo","Button","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.fce06255.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n     Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\r\n     *\r\n     * @param initUrl string that gives the route that the function fetch data from.\r\n     */\r\nexport const useFetch = (initUrl) => {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState(undefined);\r\n  /* setTimeout(() => { let { info, result } = data }, 5000); */\r\n  let timeoutID;\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (response.status !== 200) return \"There must be a problem\";\r\n        return response.json();\r\n      })\r\n      .then((json) => setData(json));\r\n\r\n    //   clearTimeout(timeoutID);\r\n\r\n    //   timeoutID = setTimeout(() => {\r\n    //     let { info, results } = data;\r\n    //     return results;\r\n    //   }, 5000);\r\n  }, [url]);\r\n\r\n  return [data, setUrl];\r\n}\r\n","export const mainUrls = {\r\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\r\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nconst Character = (props) => {\r\n  const [isShown, setIsShown] = useState(false);\r\n\r\n  const showCharacterDetails = () => {\r\n    setIsShown((isShown) => !isShown);\r\n  };\r\n  // bug (??) egyszerre tobb kartyat is meg lehet nyitni egymas tetejere\r\n  return (\r\n    <div className={isShown ? \"detailedCards\" : \"miniCards\"} onClick={showCharacterDetails}>\r\n      <div className={isShown ? \"portalCards\" : \"\"}>\r\n        <div className=\"charName\">\r\n          <p className=\"charac\">{props.name}</p>\r\n        </div>\r\n        <div className=\"charPicture\">\r\n          <img className=\"img\" src={props.image} alt=\"\" />\r\n        </div>\r\n        <div className=\"charSpecies\">\r\n          <p className=\"characSpec\">{props.species}</p>\r\n        </div>\r\n        {isShown && (\r\n          <div>\r\n            <p className=\"low\"><small>Status:</small> {props.status}</p>\r\n            <p className=\"low\"><small>Gender:</small> {props.gender}</p>\r\n            <p className=\"low\"><small>Location:</small> {props.location}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React, { useState } from \"react\";\r\nimport { useCharacters } from \"../api/useData\";\r\nimport Character from \"./Character\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst Characters = () => {\r\n  const [page, setPage] = useState(1);\r\n  const character = useCharacters(page);\r\n\r\n  let characterList = [];\r\n\r\n  if (character !== \"Loading...\" && character !== undefined) {\r\n    characterList = character.results.map((item) => (\r\n      <Character\r\n        key={item.id}\r\n        image={item.image}\r\n        name={item.name}\r\n        species={item.species}\r\n        gender={item.gender}\r\n        origin={item.origin.name}\r\n        location={item.location.name}\r\n        status={item.status}\r\n      />\r\n    ));\r\n  }\r\n\r\n  const paginationEvent = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"character-list\">\r\n      {characterList}\r\n      <div className=\"pagination\">\r\n        {/* attributumok a design-hoz: https://mui.com/components/pagination/ */}\r\n        <Pagination\r\n          count=\"42\"\r\n          page={page}\r\n          onChange={paginationEvent}\r\n          defaultPage={1}\r\n          boundaryCount={2}\r\n          size=\"large\"\r\n          color=\"secondary\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","import React, { useEffect } from \"react\";\r\nimport { useFetch } from \"./useFetch.js\";\r\nimport { mainUrls } from \"./dataRoutes.js\";\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the characters objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useCharacters = (pageNum = 1) => {\r\n  const [characters, setUrl] = useFetch(mainUrls.characters + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.characters + pageNum);\r\n  }, [pageNum]);\r\n  return characters === undefined ? \"Loading...\" : characters;\r\n};\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the locations objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useLocations = (pageNum = 1) => {\r\n  const [locations, setUrl] = useFetch(mainUrls.locations + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.locations + pageNum);\r\n  }, [pageNum]);\r\n  return locations === undefined ? \"Loading...\" : locations;\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nconst Location = (props) => {\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    const showLocationDetails = () => {\r\n        setIsShown((isShown) => !isShown);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={isShown ? \"locVisible\" : \"locCard\"}\r\n            onClick={showLocationDetails}\r\n        >\r\n            <div className={isShown ? \"portalCardsLoc\" : \"\"}>\r\n                <div className=\"locName\">\r\n                    <h2>{props.name}</h2>\r\n                </div>\r\n                <div className=\"locType\">\r\n                    <p>{props.type}</p>\r\n                </div>\r\n                {isShown && (\r\n                    <div>\r\n                        <p>Dimension: {props.dimension}</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Location;","import React, { useState } from \"react\";\r\nimport Location from \"./Location\";\r\nimport { useLocations } from \"../api/useData\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst Locations = (props) => {\r\n  const [page, setPage] = useState(1);\r\n  const location = useLocations(page);\r\n\r\n  let locationList = [];\r\n\r\n  if (location !== \"Loading...\" && location !== undefined) {\r\n    locationList = location.results.map((item) => (\r\n      <Location key={item.id} name={item.name} type={item.type} dimension={item.dimension} created={item.created} />\r\n    ));\r\n  }\r\n\r\n  const paginationEvent = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"location-list\">{locationList}\r\n        <div className=\"pagination\">\r\n          {/* attributumok a design-hoz: https://mui.com/components/pagination/ */}\r\n          <Pagination\r\n            count=\"7\"\r\n            page={page}\r\n            onChange={paginationEvent}\r\n            defaultPage={1}\r\n            boundaryCount={2}\r\n            size=\"large\"\r\n            color=\"secondary\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Locations;\r\n","import React from \"react\";\r\n\r\nfunction ButtonList(props) {\r\n    const button1 = props.charText;\r\n    const button2 = props.locText;\r\n    const showChar = props.showChar;\r\n    const showLoc = props.showLoc;\r\n\r\n    let content = \r\n    <div className=\"buttonW\">\r\n        <button className=\"cha\" onClick={showChar}><span>{button1}</span></button>\r\n        <button className=\"loc\" onClick={showLoc}><span>{button2}</span></button>\r\n    </div>;\r\n\r\n    return content;\r\n }\r\n\r\n export default ButtonList;","import React from \"react\";\r\n\r\nconst Description = () => {\r\n  return (\r\n    <div className=\"description\">\r\n      <p>\r\n        Rick and Morty is an American adult animated science fiction sitcom created by Justin Roiland and Dan Harmon for\r\n        Cartoon Network's nighttime programming block, Adult Swim. The series follows the misadventures of cynical mad\r\n        scientist Rick Sanchez and his good-hearted, but fretful grandson Morty Smith, who split their time between\r\n        domestic life and interdimensional adventures.\r\n        <br />\r\n        The Rick and Morty universe is kinda big with lot of characters and locations. We would like to make it easier\r\n        to look up information about each characters and locations.\r\n        <br />\r\n        Click on any of the buttons to see the related data. On the cards click again to toggle further informations.\r\n      </p>\r\n      <h1>Wubba Lubba dub dub</h1>\r\n    </div>\r\n  );\r\n};\r\nexport default Description;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useCharacters, useLocations } from \"./api/useData\";\r\nimport { useFetch } from \"./api/useFetch\";\r\nimport logo from \"./images/Rick_and_Morty_Logo_and_Image.png\";\r\nimport \"./App.css\";\r\nimport Characters from \"./components/Characters.jsx\";\r\nimport Locations from \"./components/Locations.jsx\";\r\nimport ButtonList from \"./components/Button.jsx\";\r\nimport Description from \"./components/Description.jsx\";\r\n\r\nfunction App() {\r\n  /*   const [characters, setCharacters] = useState([]);\r\n    const [page, setPage] = useState(1); */\r\n\r\n  const [character, setCharacter] = useState(false);\r\n  const [location, setLocation] = useState(false);\r\n  const [description, setDescription] = useState(true);\r\n\r\n  const showChar = () => {\r\n    setCharacter(true);\r\n    setLocation(false);\r\n    setDescription(false);\r\n  };\r\n\r\n  const showLoc = () => {\r\n    setLocation(true);\r\n    setCharacter(false);\r\n    setDescription(false);\r\n  };\r\n\r\n  const showDesc = () => {\r\n    setLocation(false);\r\n    setCharacter(false);\r\n    setDescription(true);\r\n  };\r\n\r\n  const charText = \"Characters\";\r\n  const locText = \"Locations\";\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <img src={logo} onClick={showDesc} />\r\n      </header>\r\n      <div className=\"content\">\r\n        <div className=\"buttons\">\r\n          {/* <button onClick={showChar}>Characters</button>\r\n          <button onClick={showLoc}>Locations</button> */}\r\n          <ButtonList charText={charText} locText={locText} showChar={showChar} showLoc={showLoc} />\r\n          {/* <Button text=\"Locations\" /> */}\r\n          {/* //itt lesz egy button komponensünk még */}\r\n        </div>\r\n        {!character && !location ? (\r\n          <div>\r\n            <Description />\r\n            {/* <Description /> */}\r\n            {/* //itt lesz a bemutatkozó komponens */}\r\n          </div>\r\n        ) : (\r\n          <div className=\"card\">\r\n            {character && <Characters />}\r\n            {location && <Locations />}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty_Logo_and_Image.4ca43f48.png\";"],"sourceRoot":""}